/**
 * Generated by orval v6.9.6 üç∫
 * Do not edit manually.
 * payreco
 * API for payreco app
 * OpenAPI spec version: 1.0
 */
import { useQuery, useMutation } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type { User } from ".././model";
import { customInstance } from ".././custom-instance";
import type { ErrorType, BodyType } from ".././custom-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

/**
 * Get a user
 * @summary Get a user
 */
export const getUsersUserId = (
  userId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<User>(
    { url: `/users/${userId}`, method: "get", signal },
    options
  );
};

export const getGetUsersUserIdQueryKey = (userId: string) => [
  `/users/${userId}`,
];

export type GetUsersUserIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersUserId>>
>;
export type GetUsersUserIdQueryError = ErrorType<unknown>;

export const useGetUsersUserId = <
  TData = Awaited<ReturnType<typeof getUsersUserId>>,
  TError = ErrorType<unknown>
>(
  userId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUsersUserId>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUsersUserIdQueryKey(userId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersUserId>>> = ({
    signal,
  }) => getUsersUserId(userId, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getUsersUserId>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!userId,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * Create a user
 * @summary Create a user
 */
export const postUser = (
  postUserBody: BodyType<unknown>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<User>(
    {
      url: `/users`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: postUserBody,
    },
    options
  );
};

export type PostUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof postUser>>
>;
export type PostUserMutationBody = BodyType<unknown>;
export type PostUserMutationError = ErrorType<unknown>;

export const usePostUser = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUser>>,
    TError,
    { data: BodyType<unknown> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postUser>>,
    { data: BodyType<unknown> }
  > = (props) => {
    const { data } = props ?? {};

    return postUser(data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof postUser>>,
    TError,
    { data: BodyType<unknown> },
    TContext
  >(mutationFn, mutationOptions);
};
