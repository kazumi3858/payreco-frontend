/**
 * Generated by orval v6.9.6 üç∫
 * Do not edit manually.
 * payreco
 * API for payreco app
 * OpenAPI spec version: 1.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type { Work } from ".././model";
import { customInstance } from ".././custom-instance";
import type { ErrorType } from ".././custom-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

/**
 * Get works
 * @summary Get works
 */
export const getWorks = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Work[]>(
    { url: "/works", method: "get", signal },
    options
  );
};

export const getGetWorksQueryKey = () => ["/works"];

export type GetWorksQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWorks>>
>;
export type GetWorksQueryError = ErrorType<unknown>;

export const useGetWorks = <
  TData = Awaited<ReturnType<typeof getWorks>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getWorks>>, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetWorksQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getWorks>>> = ({
    signal,
  }) => getWorks(requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof getWorks>>, TError, TData>(
    queryKey,
    queryFn,
    { staleTime: Infinity, ...queryOptions }
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};
